{"version":3,"sources":["routes/resetpassword/ResetPassword.module.scss","routes/resetpassword/ResetPasswordUtil.tsx","routes/resetpassword/ResetPasswordReducer.tsx","routes/resetpassword/ResetPasswordView.react.tsx","routes/resetpassword/ResetPassword.react.tsx"],"names":["module","exports","queryString","require","resetPasswordStateInit","initialState","resetPasswordReducer","state","action","type","compose","withRouter","props","React","useReducer","showSendResetLinkFormView","showResetPasswordFormView","className","s","resetPasswordView","onPasswordResetSuccess","history","push","onResetLinkSentSuccess","isCreatorSide","userEmail","firebasePasswordResetActionCode","ResetPassword","useContext","AppContext","appState","resetPasswordData","authUser","location","matchParams","useState","isLoading","error","data","updateData","fetchData","a","queryParams","parse","search","continueUrl","creatorsResetPasswordLink","mode","oobCode","redirect","verifyPasswordResetCode","useEffect","useFetchResetPasswordData","match","LoadingView","window","replace","currentUser","to"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,kBAAoB,2C,mKCIhCC,EAAcC,EAAQ,K,yBCCtBC,EAAyB,SAC7BC,GAD6B,sBAG1BA,IAGCC,EAAuB,SAC3BC,EACAC,GAII,OAFIA,EAAOC,KAEJF,G,mBC4BEG,cAAsBC,IAAtBD,EAzB4B,SAACE,GAAkB,IAAD,EACpBC,IAAMC,WAC3CR,EACA,CACES,0BAA2BH,EAAMG,0BACjCC,0BAA2BJ,EAAMI,2BAEnCZ,GAPyD,6BAU3D,OACE,yBAAKa,UAAWC,IAAEC,mBAChB,kBAAC,IAAD,CACEC,uBAAwB,kBAAMR,EAAMS,QAAQC,KAAK,WACjDC,uBAAwB,kBAAMX,EAAMS,QAAQC,KAAK,MACjDE,eAAe,EACfC,UAAWb,EAAMa,UACjBV,0BAA2BH,EAAMG,0BACjCC,0BAA2BJ,EAAMI,0BACjCU,gCAAiCd,EAAMc,sCCEhCC,EA7BwB,SAACf,GAAkB,IAAD,EACpCC,IAAMe,WAAWC,KAA7BC,EADgD,oBAEjDC,EHQ0B,SAChCC,EACAC,EACAC,GACwB,IAAD,EACIrB,IAAMsB,SAA6B,CAC5DC,WAAW,EACXC,MAAO,OAHc,mBAChBC,EADgB,KACVC,EADU,KAMjBC,EAAS,uCAAG,gCAAAC,EAAA,0DACVC,EAAcxC,EAAYyC,MAC9BV,EAASW,SAEKC,cACRC,EADqB,UACUJ,EAAYG,YADtB,iBAC0CH,EAAYK,KADtD,oBACsEL,EAAYM,SAC7GT,EAAW,eACND,EADK,CAERF,WAAW,EACXa,SAAUH,OAGVd,EAZY,gBAad,IACEO,EAAW,eACND,EADK,CAERF,WAAW,KAEb,MAAOC,GACPE,EAAW,eACND,EADK,CAERF,WAAW,EACXC,MAAOA,KAtBG,2BA0BVK,EAAYK,OAAQL,EAAYM,QA1BtB,2CA4BcE,YAAwBR,EAAYM,SA5BlD,QA4BJvB,EA5BI,OA6BVc,EAAW,eACND,EADK,CAERF,WAAW,EACXrB,2BAA2B,EAC3BC,2BAA2B,EAC3BU,gCAAiCgB,EAAYM,QAC7CvB,UAAWA,KAnCH,kDAsCVc,EAAW,eACND,EADK,CAERF,WAAW,EACXC,MAAM,EAAD,MAzCG,gCA6CZE,EAAW,eACND,EADK,CAERF,WAAW,EACXrB,2BAA2B,EAC3BC,2BAA2B,KAjDjB,0DAAH,qDA2Df,OAJAH,IAAMsC,WAAU,WACdX,MACC,IAEIF,EG7EmBc,CACxBtB,EAASE,SACTpB,EAAMqB,SACNrB,EAAMyC,OAGR,OAAItB,EAAkBK,UACb,kBAACkB,EAAA,EAAD,MACEvB,EAAkBkB,cAC3BM,OAAOtB,SAASuB,QAAQzB,EAAkBkB,UACjCnB,EAASE,UAAYF,EAAS2B,YAChC,kBAAC,IAAD,CAAUC,GAAI,iBAGnB,kBAAC,EAAD,CACErB,MAAON,EAAkBM,MACzBZ,UAAWM,EAAkBN,UAC7BV,0BAA2BgB,EAAkBhB,0BAC7CC,0BAA2Be,EAAkBf,0BAC7CU,gCACEK,EAAkBL","file":"static/js/49.dbec384c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"resetPasswordView\":\"ResetPassword_resetPasswordView__2Ih_l\"};","import * as DataTypes from \"data/types\";\nimport React from \"react\";\nimport RESTAPIClient from \"RESTAPIClient\";\nimport { verifyPasswordResetCode } from \"FirebaseClient\";\n\nconst queryString = require(\"query-string\");\n\ninterface ResetPasswordState {\n  isLoading: boolean;\n  userEmail?: string;\n  showSendResetLinkFormView?: boolean;\n  showResetPasswordFormView?: boolean;\n  firebasePasswordResetActionCode?: string;\n  redirect?: string;\n  error?: Error;\n}\n\ninterface ResetPasswordQueryParams {\n  mode?: string;\n  oobCode?: string;\n  continueUrl?: string;\n}\n\nconst useFetchResetPasswordData = (\n  authUser,\n  location,\n  matchParams,\n): ResetPasswordState => {\n  const [data, updateData] = React.useState<ResetPasswordState>({\n    isLoading: true,\n    error: null,\n  });\n\n  const fetchData = async (): Promise<void> => {\n    const queryParams = queryString.parse(\n      location.search,\n    ) as ResetPasswordQueryParams;\n    if (queryParams.continueUrl) {\n      const creatorsResetPasswordLink = `${queryParams.continueUrl}?mode=${queryParams.mode}&oobCode=${queryParams.oobCode}`;\n      updateData({\n        ...data,\n        isLoading: false,\n        redirect: creatorsResetPasswordLink,\n      });\n    }\n    if (authUser) {\n      try {\n        updateData({\n          ...data,\n          isLoading: false,\n        });\n      } catch (error) {\n        updateData({\n          ...data,\n          isLoading: false,\n          error: error,\n        });\n      }\n    } else {\n      if (queryParams.mode && queryParams.oobCode) {\n        try {\n          const userEmail = await verifyPasswordResetCode(queryParams.oobCode);\n          updateData({\n            ...data,\n            isLoading: false,\n            showSendResetLinkFormView: false,\n            showResetPasswordFormView: true,\n            firebasePasswordResetActionCode: queryParams.oobCode,\n            userEmail: userEmail,\n          });\n        } catch (error) {\n          updateData({\n            ...data,\n            isLoading: false,\n            error: error,\n          });\n        }\n      } else {\n        updateData({\n          ...data,\n          isLoading: false,\n          showSendResetLinkFormView: true,\n          showResetPasswordFormView: false,\n        });\n      }\n    }\n  };\n\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n\n  return data;\n};\n\nexport { useFetchResetPasswordData };\n","interface ResetPasswordState {}\n\ninterface ResetPasswordAction {\n  type?: string;\n}\n\nconst resetPasswordStateInit = (\n  initialState: ResetPasswordState,\n): ResetPasswordState => ({\n  ...initialState,\n});\n\nconst resetPasswordReducer = (\n  state: ResetPasswordState,\n  action: ResetPasswordAction,\n): ResetPasswordState => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n\nexport { resetPasswordStateInit, resetPasswordReducer };\n","import { Form, notification, message } from \"antd\";\nimport React, { MutableRefObject } from \"react\";\nimport { withRouter } from \"react-router\";\nimport { compose } from \"recompose\";\nimport { History } from \"history\";\nimport ResetPassword from \"components/ResetPassword\";\nimport {\n  resetPasswordReducer,\n  resetPasswordStateInit,\n} from \"./ResetPasswordReducer\";\nimport s from \"./ResetPassword.module.scss\";\n\ninterface Props {\n  history?: History;\n  error?: Error;\n  userEmail?: string;\n  showSendResetLinkFormView?: boolean;\n  showResetPasswordFormView?: boolean;\n  firebasePasswordResetActionCode?: string;\n}\n\nconst ResetPasswordView: React.FC<Props> = (props: Props) => {\n  const [resetPasswordState, dispatch] = React.useReducer(\n    resetPasswordReducer,\n    {\n      showSendResetLinkFormView: props.showSendResetLinkFormView,\n      showResetPasswordFormView: props.showResetPasswordFormView,\n    },\n    resetPasswordStateInit,\n  );\n\n  return (\n    <div className={s.resetPasswordView}>\n      <ResetPassword\n        onPasswordResetSuccess={() => props.history.push(\"/login\")}\n        onResetLinkSentSuccess={() => props.history.push(\"/\")}\n        isCreatorSide={false}\n        userEmail={props.userEmail}\n        showSendResetLinkFormView={props.showSendResetLinkFormView}\n        showResetPasswordFormView={props.showResetPasswordFormView}\n        firebasePasswordResetActionCode={props.firebasePasswordResetActionCode}\n      />\n    </div>\n  );\n};\n\nexport default compose<Props, Props>(withRouter)(ResetPasswordView);\n","import { AppContext } from \"App\";\nimport React from \"react\";\nimport { Redirect, match } from \"react-router-dom\";\nimport { Location } from \"history\";\nimport { useFetchResetPasswordData } from \"./ResetPasswordUtil\";\nimport LoadingView from \"components/Views/LoadingView\";\nimport ResetPasswordView from \"./ResetPasswordView.react\";\n\ninterface Props {\n  location?: Location;\n  match?: match;\n}\n\nconst ResetPassword: React.FC<Props> = (props: Props) => {\n  const [appState] = React.useContext(AppContext);\n  const resetPasswordData = useFetchResetPasswordData(\n    appState.authUser,\n    props.location,\n    props.match,\n  );\n\n  if (resetPasswordData.isLoading) {\n    return <LoadingView />;\n  } else if (resetPasswordData.redirect) {\n    window.location.replace(resetPasswordData.redirect);\n  } else if (appState.authUser && appState.currentUser) {\n    return <Redirect to={\"/mydashboard\"} />;\n  } else {\n    return (\n      <ResetPasswordView\n        error={resetPasswordData.error}\n        userEmail={resetPasswordData.userEmail}\n        showSendResetLinkFormView={resetPasswordData.showSendResetLinkFormView}\n        showResetPasswordFormView={resetPasswordData.showResetPasswordFormView}\n        firebasePasswordResetActionCode={\n          resetPasswordData.firebasePasswordResetActionCode\n        }\n      />\n    );\n  }\n};\n\nexport default ResetPassword;\n"],"sourceRoot":""}