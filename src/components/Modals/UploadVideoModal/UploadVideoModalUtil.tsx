import React from "react";
import RESTAPIClient from "RESTAPIClient";
import { UploadFileResponse, uploadFile } from "FirebaseClient/FirebaseStorage";
import { UploadFile } from "antd/lib/upload/interface";
import * as DataTypes from "data/types";

const uploadSelectedVideoFile = async (params: {
  videoFile: UploadFile<any>
  uploadDirectory: string;
  creatorUserId: string;
  onUploadProgressChange: (progress: number) => void;
}): Promise<UploadFileResponse> => {
  return await uploadFile(
    params.videoFile.originFileObj,
    params.videoFile.name,
    params.videoFile.type,
    params.uploadDirectory,
    params.creatorUserId,
    params.onUploadProgressChange
  )
}

const addResourceToSinglePlaylist = async (
  playlistId: string,
  resourceId: string,
  userId: string,
) => {
  try {
    const playlist = await RESTAPIClient.Playlist.get(playlistId);
    if (playlist.sections.length > 0) {
      await RESTAPIClient.Playlist.addVideoToSection(
        playlistId,
        playlist.sections.length,
        resourceId,
        userId,
      );
      return { error: null };
    } else {
      try {
        await RESTAPIClient.Playlist.addSection(
          playlistId,
          userId,
          "Autogenerated Title - Please Edit",
          "Autogenerated Description - Please Edit"
        );
        await RESTAPIClient.Playlist.addVideoToSection(
          playlistId,
          1,
          resourceId,
          userId,
        );
        return { error: null };
      } catch (err) {
        return { error: new Error("Could not add to sections") };
      }
    }
  } catch (err) {
    return { error: err };
  }
};

const addResourceToSingleMission = async (
  resourceId: string,
  userId: string,
  missionId: string,
) => {
  try {
    await RESTAPIClient.Mission.addContent(
      missionId,
      [resourceId],
      [],
      userId,
    );
    return { error: null };
  } catch (err) {
    return { error: err };
  }
};

const addResourceToPlaylistsAndMissions = async (
  resourceId: string,
  missionIds: Array<string>,
  playlistIds: Array<string>,
  userId: string,
) => {
  const missionUpdatePromiseList = missionIds
    ? missionIds.map(missionId =>
      addResourceToSingleMission(resourceId, userId, missionId),
    )
    : [];
  const missionUpdateResponses = await Promise.all(missionUpdatePromiseList);

  const playlistUpdatePromiseList = playlistIds
    ? playlistIds.map(playlistId =>
      addResourceToSinglePlaylist(playlistId, resourceId, userId),
    )
    : [];
  const playlistUpdateResponses = await Promise.all(playlistUpdatePromiseList);

  const allUpdateResponses = playlistUpdateResponses.concat(
    missionUpdateResponses,
  );

  const errors = allUpdateResponses
    .filter(response => response.error)
    .map(response => response.error);

  return { errors };
};

const submitVideoDetailsFormData = async (params: {
  userId: string;
  videoTitle: string;
  videoDescription: string;
  videoDownloadURL: string;
  videoThumbnailFile: File;
  videoDuration: number;
  isDefaultThumbnailSelected: boolean;
}): Promise<DataTypes.Resource> => {
  const uploadImageResponse = await uploadFile(
    params.videoThumbnailFile,
    params.isDefaultThumbnailSelected ? "default.png" : params.videoThumbnailFile.name,
    params.videoThumbnailFile.type,
    "thumbnails",
    params.userId,
    progress => { },
  );
  return await RESTAPIClient.Resource.create(
    params.videoTitle,
    params.videoDescription,
    params.videoDownloadURL,
    uploadImageResponse.downloadURL,
    params.userId,
    params.videoDuration,
  );
};

export { uploadSelectedVideoFile, submitVideoDetailsFormData, addResourceToPlaylistsAndMissions }